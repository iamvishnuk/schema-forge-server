openapi: 3.0.0
info:
  title: Schema Forge API Documentation
  description: API documentation for Schema Forge application
  version: 0.1.9
servers:
  - url: http://localhost:8000/api/v1
    description: Development server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
    refreshCookie:
      type: apiKey
      in: cookie
      name: refreshToken
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        email:
          type: string
          format: email
        name:
          type: string
        isEmailVerified:
          type: boolean
        userPreferences:
          type: object
          properties:
            enable2FA:
              type: boolean
            emailNotification:
              type: boolean
            twoFactorSecret:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Session:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        userId:
          type: string
          format: objectId
        userAgent:
          type: string
        createdAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
    VerificationCode:
      type: object
      properties:
        _id:
          type: string
          format: objectId
        userId:
          type: string
          format: objectId
        code:
          type: string
        type:
          type: string
          enum:
            - EMAIL_VERIFICATION
            - PASSWORD_RESET
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TeamMember:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: 'Unique identifier for the team member.'
        userId:
          type: string
          format: objectId
          description: 'Reference to the User who is a member of the team.'
        teamId:
          type: string
          format: objectId
          description: 'Reference to the Team the user belongs to.'
        joinedAt:
          type: string
          format: date-time
          description: 'Timestamp when the user joined the team.'
        role:
          type: string
          enum:
            - MEMBER
            - ADMIN
            - OWNER
            - VIEWER
          description: 'Role of the team member.'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: 'Status of the team member.'
        createdAt:
          type: string
          format: date-time
          description: 'Timestamp when the team member was created.'
        updatedAt:
          type: string
          format: date-time
          description: 'Timestamp when the team member was last updated.'
      required:
        - userId
        - role
        - status
        - teamId
        - joinedAt
        - createdAt
        - updatedAt
    Team:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: 'Unique identifier for the team.'
        name:
          type: string
          description: 'Name of the team.'
        description:
          type: string
          description: 'Optional description of the team.'
        createdBy:
          type: string
          format: objectId
          description: 'User ID of the team creator.'
        createdAt:
          type: string
          format: date-time
          description: 'Timestamp when the team was created.'
        updatedAt:
          type: string
          format: date-time
          description: 'Timestamp when the team was last updated.'
      required:
        - name
        - createdBy
        - createdAt
        - updatedAt
    Invitation:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: 'Unique identifier for the invitation.'
        teamId:
          type: string
          format: objectId
          description: 'Reference to the Team for which the invitation is sent.'
        invitedBy:
          type: string
          format: objectId
          description: 'User ID of the person who sent the invitation.'
        inviteeEmail:
          type: string
          format: email
          description: 'Email address of the person being invited.'
        role:
          type: string
          enum:
            - MEMBER
            - ADMIN
            - VIEWER
          description: 'Role of the invitee in the team.'
        expiresAt:
          type: string
          format: date-time
          description: 'Timestamp when the invitation expires.'
        createdAt:
          type: string
          format: date-time
          description: 'Timestamp when the invitation was created.'
        updatedAt:
          type: string
          format: date-time
          description: 'Timestamp when the invitation was last updated.'
      required:
        - teamId
        - invitedBy
        - inviteeEmail
        - role
        - expiresAt
        - createdAt
        - updatedAt
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
        error:
          type: object
          properties:
            status:
              type: string
            statusCode:
              type: number
            isOperational:
              type: boolean
        message:
          type: string
        stack:
          type: string
          description: Stack trace information (only shown in development environment)
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      tokens:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string

        '400':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify/email:
    post:
      summary: Verify email address
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password/forgot:
    post:
      summary: Request password reset send email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password/reset:
    post:
      summary: Reset password with token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - code
                - password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Log out the current user
      tags:
        - Authentication
      security:
        - accessToken: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    get:
      summary: Refresh access token
      tags:
        - Authentication
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /session/all:
    get:
      summary: Get all user sessions
      tags:
        - Session Management
      security:
        - accessToken: []
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /session/current:
    get:
      summary: Get current session information
      tags:
        - Session Management
      security:
        - accessToken: []
      responses:
        '200':
          description: Current session retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /session/{id}:
    delete:
      summary: Delete a specific session
      tags:
        - Session Management
      security:
        - accessToken: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: objectId
          required: true
          description: Session ID
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /mfa/setup:
    get:
      summary: Setup 2FA for the user
      tags:
        - MFA
      security:
        - accessToken: []
      responses:
        '200':
          description: 2FA setup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      qrImageUrl:
                        type: string
                      secret:
                        type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mfa/verify:
    post:
      summary: Verify 2FA code
      tags:
        - MFA
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                secretKey:
                  type: string
              required:
                - code
                - secretKey
      responses:
        '200':
          description: 2FA verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mfa/revoke:
    put:
      summary: Revoke 2FA for the user
      tags:
        - MFA
      security:
        - accessToken: []
      responses:
        '200':
          description: 2FA revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /mfa/verify-login:
    post:
      summary: Verify 2FA code for login
      tags:
        - MFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                email:
                  type: string
              required:
                - code
                - email
      responses:
        '200':
          description: 2FA verification successful for login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    $ref: '#/components/schemas/User'
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '400':
          description: Invalid MFA code, please try again
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/create:
    post:
      summary: Create a new team
      tags:
        - Team Management
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Failed to create team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /team/update/{teamId}:
    put:
      summary: Update team information
      tags:
        - Team Management
      security:
        - accessToken: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: objectId
          required: true
          description: Team ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Team'
        '400':
          description: Failed to update team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /team/delete/{teamId}:
    delete:
      summary: Delete a team
      tags:
        - Team Management
      security:
        - accessToken: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: objectId
          required: true
          description: Team ID
      responses:
        '200':
          description: Team deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/user-teams:
    get:
      summary: Get all teams for the current user
      tags:
        - Team Management
      security:
        - accessToken: []
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        memberCount:
                          type: number
                        createdAt:
                          type: string
                          format: date-time
                        createdBy:
                          type: string
                          format: objectId
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/{teamId}:
    get:
      summary: Get team information with user
      tags:
        - Team Management
      security:
        - accessToken: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: objectId
          required: true
          description: Team ID
      responses:
        '200':
          description: Team retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      team:
                        $ref: '#/components/schemas/Team'
                      teamMember:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              format: objectId
                            userId:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  format: objectId
                                name:
                                  type: string
                                email:
                                  type: string
                                  format: email
                            teamId:
                              type: string
                              format: objectId
                            role:
                              type: string
                              enum:
                                - MEMBER
                                - ADMIN
                                - OWNER
                                - VIEWER
                            joinedAt:
                              type: string
                              format: date-time
                            status:
                              type: string
                              enum:
                                - ACTIVE
                                - INACTIVE
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'You do not have access to this team'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/invite:
    post:
      summary: Invite a user to a team
      tags:
        - Team Management
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inviteeEmail:
                  type: string
                  format: email
                role:
                  type: string
                  enum:
                    - MEMBER
                    - ADMIN
                    - VIEWER
                teamId:
                  type: string
                  format: objectId
              required:
                - email
                - role
                - teamId
      responses:
        '200':
          description: User invited successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      url:
                        type: string
        '400':
          description: User is already a member of the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You are not authorized to invite members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many invitation to this email, Please try again later
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/accept-invite:
    post:
      summary: Accept an invitation to join a team
      tags:
        - Team Management
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      teamId:
                        type: string
                        format: objectId
        '400':
          description: Invalid or expired token or Invitation email does not match user email or Failed to accept invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Invitation not found or team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You are not authorized to accept this invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/member/change-role:
    put:
      summary: Change the role of a team member
      tags:
        - Team Management
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - MEMBER
                    - ADMIN
                    - OWNER
                    - VIEWER
                id:
                  type: string
                  format: objectId
              required:
                - role
                - id
      responses:
        '200':
          description: Team member role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/TeamMember'
        '404':
          description: Failed to change team member role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /team/member/remove/{id}:
    delete:
      summary: Remove a team member or leave from the team
      tags:
        - Team Management
      security:
        - accessToken: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: objectId
          required: true
          description: Team member ID
      responses:
        '200':
          description: Team member removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/TeamMember'
        '404':
          description: You are not a member of this team or cannot remove the user or Failed to leave team or Faild to remove user from team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: You cannot remove the owner of the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
